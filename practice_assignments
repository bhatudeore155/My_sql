#### SUB-QUERY ASSIGNMENT ####
use bhatu;

create table paintings
(
id int,
name varchar(100),
artist_id int,
listed_price int
);

insert into paintings values (11,'Miracle',1,300);
insert into paintings values (12,'Sunshine',1,700);
insert into paintings values (13,'Woman',2,2800);
insert into paintings values (14,'Man',2,2300);
insert into paintings values (15,'Barbie',3,250);
insert into paintings values (16,'Cool Painting',3,5000);
insert into paintings values (17,'Black Square',3,50);
insert into paintings values (18,'Mountains',4,1300);


create table artists
(
id int,
first_name varchar(100),
last_name varchar(100),

);

insert into artists values(1,'Thomas','Black');
insert into artists values(2,'Kate','Smith');
insert into artists values(3,'Natali','Wein');
insert into artists values(4,'Francesco','Benelli');


create table collectors
(
id int,
first_name varchar(100),
last_name varchar(100),

);

insert into collectors values(101,'Brandon','Cooper');
insert into collectors values(102,'Laura','Fisher');
insert into collectors values(103,'Christina','Buffet');
insert into collectors values(104,'Steve','Stevenson');

create table sales_1 
(
id int,
dt date,
painting_id int,
artist_id int,
collector_id int,
sale_price int
);


insert into sales_1 values(1001,'2021-11-01',13,2,104,2500);
insert into sales_1 values(1002,'2021-11-10',14,2,102,2300);
insert into sales_1 values(1003,'2021-11-10',11,1,102,300);
insert into sales_1 values(1004,'2021-11-15',16,3,103,4000);
insert into sales_1 values(1005,'2021-11-22',15,3,103,200);
insert into sales_1 values(1006,'2021-11-22',17,3,103,50);

------  list paintings that are priced higher than the average
select name, listed_price from paintings
where listed_price > (select avg(listed_price) from paintings);

----- list all collectors who purchased paintings from our gallery.

select first_name, last_name from collectors
where id in (select collector_id from sales_1);

select collectors.first_name, collectors.last_name, collector_sales.sales from collectors
join
(select collector_id, sum(sale_price) as sales from sales_1	group by collector_id) as collector_sales
on collectors.id = collector_sales.collector_id;

-----total amount of sales for each artist who has sold at least one painting in our gallery.

SELECT
  artists.first_name,
  artists.last_name,
  artist_sales.sales
FROM artists
JOIN (
    SELECT artist_id, SUM(sale_price) AS sales
    FROM sales_1
    GROUP BY artist_id
  ) AS artist_sales
  ON artists.id = artist_sales.artist_id;
  ----

select first_name, last_name from artists
where id in (select artist_id from sales_1);
----

select artists.first_name, artists.last_name, artist_sales.sales from artists
join
(select artist_id, sum(sale_price) as sales from sales_1
group by artist_id) as artist_sales
on artists.id = artist_sales.artist_id;

------   the first names and the last names of the artists who had zero sales with our gallery
select first_name, last_name,id from artists
where not exists( select * from sales_1 where artists.id = sales_1.artist_id);

------  list paintings that are priced higher than the average

SELECT name, listed_price
FROM paintings
WHERE listed_price > (
    SELECT AVG(listed_price)
    FROM paintings
);

Our subquery is in the WHERE clause, where it filters the result set based on the listed price. This subquery returns a single value: the average price per painting for our gallery. Each listed price is compared to this value, and only the paintings that are priced above average make it to the final output:


----- list all collectors who purchased paintings from our gallery.

SELECT first_name, last_name
FROM collectors
WHERE id IN (
    SELECT collector_id
    FROM sales
);

-----total amount of sales for each artist who has sold at least one painting in our gallery.

SELECT
  artists.first_name,
  artists.last_name,
  artist_sales.sales
FROM artists
JOIN (
    SELECT artist_id, SUM(sales_price) AS sales
    FROM sales
    GROUP BY artist_id
  ) AS artist_sales
  ON artists.id = artist_sales.artist_id;


------   the first names and the last names of the artists who had zero sales with our gallery

SELECT first_name, last_name
FROM artists
WHERE NOT EXISTS (
  SELECT *
  FROM sales
  WHERE sales.artist_id = artists.id
);



----#### GROUP BY ASSIGNMENT ####------
create database grpby;
use grpby;
CREATE TABLE Actor
(Actor_ID int,
Actor_name varchar(30),
Gender varchar(10),
debut_year int);

CREATE TABLE Director
(Director_ID int,
Director_name varchar(30),
no_of_movies int);

CREATE TABLE Movie
(Movie_name varchar(30),
release_year int,
genre varchar(15),
lead_1 int,
lead_2 int,
director_id int,
box_collection int );

CREATE TABLE DVD
(DVD_id int,
Movie_name varchar(30),
sale int);

insert into actor values(1,'Aamir Khan','male',1988);
insert into actor values(2,'Shahrukh Khan','male',1992);
insert into actor values(3,'Kareena Kapoor','female',2000);
insert into actor values(4,'Kajol','female',1992);
insert into actor values(5,'Anushka Sharma','female',2008);
insert into actor values(6,'Ranbir Kapoor','male',2007);
insert into actor values(7,'Alia Bhatt','female',2012);
insert into actor values(8,'Ranveer Singh','male',2010);
insert into actor values(9,'Deepika Padukone','female',2006);
insert into actor values(10,'Shahid Kapoor','male',2003);
insert into actor values(11,'Katrina Kaif','female',2003);
insert into actor values(12,'Varun Dhawan','male',2012);


insert into director values(1,'Rajkumar Hirani',10);
insert into director values(2,'Sanjay Leela Bhansali',8);
insert into director values(3,'Aditya Chopra',6);
insert into director values(4,'Zoya Akhtar',3);
insert into director values(5,'Imtiaz Ali',5);
insert into director values(6,'Ayan Mukerji',4);
insert into director values(7,'Santosh Sivan',9);
insert into director values(8,'Farah Khan',4);


insert into movie values('3 Idiots',2009,'comedy',1,3,1,989600000);
insert into movie values('PK',2014,'satire',1,5,1,789600000);
insert into movie values('Bajirao Mastani',2015,'historic',8,9,2,68960000);

insert into movie values('Rab ne bana di jodi',2008,'romance',2,5,3,48960000);

insert into movie values('Gully boy',2019,'Musical drama',8,7,4,28950000);
insert into movie values('Jab we met',2007,'romance',10,3,5,18980000);
insert into movie values('Padmavat',2018,'historic',8,9,2,38460000);
insert into movie values('Yeh jawani hai deewani',2013,'romance',6,9,6,581600000);

insert into movie values('Ashoka',2001,'historic',2,3,7,8796000);
insert into movie values('Happy new year',2014,'comedy',2,9,8,68960000);


insert into DVD values(1,'3 Idiots',8890);
insert into DVD values(2,'PK',8790);
insert into DVD values(3,'Bajirao Mastani',6810);
insert into DVD values(4,'Rab ne bana di jodi',7920);
insert into DVD values(5,'Gully boy',870);
insert into DVD values(6,'Jab we met',4792);
insert into DVD values(7,'Padmavat',590);
insert into DVD values(8,'Yeh jawani hai deewani',2890);
insert into DVD values(9,'Ashoka',730);
insert into DVD values(10,'Happy new year',1690);

---Q1. Display the count of actors and actresses.

select gender,count(*) as number from Actor
group by gender;

---Q2. Display the count of movies of each genre.
select genre, count(*) as count from Movie
group by genre;

---Q3. Calculate the oldest released movie of each genre.
select genre, min(release_year) as oldest_year from Movie
group by genre;

---Q4. Calculate the total box office collection for movies of each genre.
select genre,sum(box_collection) as total_collection from Movie
group by genre;

---Q5. Display the name of director, current count of movies and total count of movies directed by him/her.

select director.Director_name, director.no_of_movies as total_count, current_movie.current_release as current_count from director
join (select director_id, count(*) as current_release, max(release_year) as current_year from movie group by director_id) as current_movie
on Director.Director_ID = current_movie.director_id;

# OR 

select director_name, count(Movie_name) as current_count, no_of_movies as total_count from movie, director
where director.director_id = movie.director_id
group by movie.director_id, Director_name, no_of_movies;



---Q6. Display the name of lead_1 actors, their count of movies and their total DVD sales.

select lead_1, count(dvd.Movie_name) as movie_count, sum(DVD.sale) AS total_sales from dvd, movie
where dvd.movie_name = movie.movie_name 
group by lead_1;


#-----Q7. Show the release year and number of movies released in each year only if more than 1 movie is released each year.

select release_year, count(movie_name) as no_of_movie from movie
group by release_year
having count(movie_name) > 1;

-----Q8. Display the director name and their total box office collection which should be greater than 50 crores.

select Director_name, sum(box_collection) as Total_collection from Director,Movie
where director.Director_ID = Movie.director_id
group by director.Director_name
having sum(box_collection) > 500000000;

----Q9. Give the count of movies of each genre in decreasing order of count.

select  genre, count(movie_name) as movie_count from Movie
group by genre
order by movie_count desc;

----Q10. Sort the movie names based on director names.

select director_name, movie_name from Director, Movie
where director.Director_ID = movie.director_id
order by Director_name;

