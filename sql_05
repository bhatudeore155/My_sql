create DATABASE test;

use test;

create table customers
(
    id int,
    name varchar(50)
);

create table orders
(
    order_id int,
    amount int,
    cust_id int
);

insert into customers values(1,'John');

insert into customers values(2,'David');

insert into customers values(3,'Ronn');

insert into customers values(4,'Betty');


insert into orders values(1,100,10);

insert into orders values(2,500,3);

insert into orders values(3,300,6);

insert into orders values(4,800,2);

insert into orders values(5,350,1);

select * from customers;

select * from orders;
# Get the orders information along with customers full details
# if order amount were greater than 400

select c.*,o.* 
from orders o
inner join customers c on o.cust_id=c.id
where o.amount >400;

select c.*,o.* 
from orders o
inner join customers c on o.cust_id=c.id and o.amount >400;

---Window Functio----
create table shop_sales_data
(
sales_date date,
shop_id varchar(5),
sales_amount int
);

insert into shop_sales_data values('2022-02-14','S1',200);
insert into shop_sales_data values('2022-02-15','S1',300);
insert into shop_sales_data values('2022-02-14','S2',600);
insert into shop_sales_data values('2022-02-15','S3',500);
insert into shop_sales_data values('2022-02-18','S1',400);
insert into shop_sales_data values('2022-02-17','S2',250);
insert into shop_sales_data values('2022-02-20','S3',300);

select * from shop_sales_data;

--Total sum of sales fro each shop using window function--
--working function - sum(), min() max(), avg(), count()--
select *,
        count(*) over(PARTITION BY shop_id) as sales_count_by_shops
        from shop_sales_data;

select *,
        sum(sales_amount) over(PARTITION BY shop_id ORDER BY sales_amount desc) as sales_count_by_shops
        from shop_sales_data;

create table amazon_sales_data
(
    sales_data date,
    sales_amount int
);

insert into amazon_sales_data values('2022-08-21',500);
insert into amazon_sales_data values('2022-08-22',600);
insert into amazon_sales_data values('2022-08-19',300);

insert into amazon_sales_data values('2022-08-18',200);

insert into amazon_sales_data values('2022-08-25',800);

select * from amazon_sales_data;

# Query - Calculate the date wise rolling average of amazon sales
select * from amazon_sales_data;

select *,
       avg(sales_amount) over(order by sales_data) as rolling_avg
from amazon_sales_data;

select *,
         avg(sales_amount) over(ORDER BY sales_data) as rolling_avg,
         sum(sales_amount) over(ORDER BY sales_data) as rolling_sum
         from amazon_sales_data;

create DATABASE test;
use test;
create table employees
(
    emp_id int,
    salary int,
    dept_name VARCHAR(30)

);

insert into employees values(1,10000,'Software');
insert into employees values(2,11000,'Software');
insert into employees values(3,11000,'Software');
insert into employees values(4,11000,'Software');
insert into employees values(5,15000,'Finance');
insert into employees values(6,15000,'Finance');
insert into employees values(7,15000,'IT');
insert into employees values(8,12000,'HR');
insert into employees values(9,12000,'HR');
insert into employees values(10,11000,'HR');

select * from employees;
# Query - get one employee from each department who is getting maximum salary (employee can be random if salary is same)

select temp.*
      from (select *,
        ROW_NUMBER() over(PARTITION BY dept_name ORDER BY salary desc) as row_num from 
        employees) temp
    where temp.row_num = 1;

# Query - get all employee from each department who is getting maximum salary.

select temp.*
      from (select *,
        Rank() over(PARTITION BY dept_name ORDER BY salary desc) as rank_num from 
        employees) temp
    where temp.rank_num = 1;

# Query - get alltop2 employee from each department who is getting maximum salary.

select temp.*
      from (select *,
        DENSE_RANK() over(PARTITION BY dept_name ORDER BY salary desc) as dense_rank_num from 
        employees) temp
    where temp.dense_rank_num <=2;

# Example for lag and lead
create table daily_sales
(
sales_date date,
sales_amount int
);


insert into daily_sales values('2022-03-11',400);
insert into daily_sales values('2022-03-12',500);
insert into daily_sales values('2022-03-13',300);
insert into daily_sales values('2022-03-14',600);
insert into daily_sales values('2022-03-15',500);
insert into daily_sales values('2022-03-16',200);

select * from daily_sales;

select *,
        lag(sales_amount, 1) over(order by sales_date) as pre_date_sales
        from daily_sales;

select sales_date,
       sales_amount as curr_sales,
       lag(sales_amount, 1,0) over(order by sales_date) as pre_sales,
       sales_amount - lag(sales_amount, 1,0) over(order by sales_date) as sales_diff
       from daily_sales;

select *,
        lead(sales_amount, 1) over(order by sales_date) as pre_date_sales
        from daily_sales;
